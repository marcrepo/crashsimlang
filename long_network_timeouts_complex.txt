Long Network Timeouts (Simple - Indefinitely Waiting on Socket)
================================================================
# Find socket system calls that wait indefinitely on a socket by utilizing the 
# the poll system call (by passing a negative timeout -> yields infinite timeout)
# or select system call (by passing a NULL timeout -> yields infinite timeout)
# For the select system call we only match on the read file descriptor array

Preamble
========

socket(...) = $socket_fd ->
   socket[$socket_fd != -1]($socket_fd)

connect($socket_fd, ...) = $connect_return_value ->
   connect[$connect_return_value != -1]($socket_fd)

poll($pollfd, $nfds, $timeout) = $poll_return_value ->
   poll[exists x in $nfds such that $pollfd[x]->fd=$socket_fd, $poll_return_value != 0, $timeout < 0]($socket_fd)

select($nfds,$readfds,...,...,$timeout) ->
   select[exists x in $nfds such that readfds[x]->fd=$socket_fd, $timeout==NULL]($socket_fd)




Inspector
=========
# Note repetition of .*; poll(xxx).  This is to capture ALL
# of the poll system calls we are interested in so we can modify them all

.*; 
socket[T](?socket_fd); 
.* 
connect[T](!socket_fd); 
(.*; (poll[T,T](!socket_fd) | select[T,T] (!socket_fd);))+




Mutator
=======
# Specify expressions to modify stored register values here 

# Timeout variable doubles as an output variable for
# (timeout - time spent waiting)
timeout == 1


# ! is used to write out values from register rather than matching
socket[T](?sock);  # unchanged
connect[T](!sock); # unchanged
(.*; poll[T,T](!sock, !timeout))+

